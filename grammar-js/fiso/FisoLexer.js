"use strict";
// Generated from grammar-ts/fiso/Fiso.g4 by ANTLR 4.9.0-SNAPSHOT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FisoLexer = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class FisoLexer extends Lexer_1.Lexer {
    // tslint:enable:no-trailing-whitespace
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(FisoLexer._ATN, this);
    }
    // @Override
    // @NotNull
    get vocabulary() {
        return FisoLexer.VOCABULARY;
    }
    // @Override
    get grammarFileName() { return "Fiso.g4"; }
    // @Override
    get ruleNames() { return FisoLexer.ruleNames; }
    // @Override
    get serializedATN() { return FisoLexer._serializedATN; }
    // @Override
    get channelNames() { return FisoLexer.channelNames; }
    // @Override
    get modeNames() { return FisoLexer.modeNames; }
    static get _ATN() {
        if (!FisoLexer.__ATN) {
            FisoLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(FisoLexer._serializedATN));
        }
        return FisoLexer.__ATN;
    }
}
exports.FisoLexer = FisoLexer;
FisoLexer.LP = 1;
FisoLexer.RP = 2;
FisoLexer.LCB = 3;
FisoLexer.RCB = 4;
FisoLexer.MUL = 5;
FisoLexer.DIV = 6;
FisoLexer.ADD = 7;
FisoLexer.SUB = 8;
FisoLexer.GREATHER = 9;
FisoLexer.LESSER = 10;
FisoLexer.GREATEQUAL = 11;
FisoLexer.LESSEQUAL = 12;
FisoLexer.AND = 13;
FisoLexer.OR = 14;
FisoLexer.EQUAL = 15;
FisoLexer.DIFFERENT = 16;
FisoLexer.VAR = 17;
FisoLexer.PRINT = 18;
FisoLexer.IF = 19;
FisoLexer.ELSE = 20;
FisoLexer.WHILE = 21;
FisoLexer.ASSIGN = 22;
FisoLexer.NUMBER = 23;
FisoLexer.TRUE = 24;
FisoLexer.FALSE = 25;
FisoLexer.ID = 26;
FisoLexer.BLANKS = 27;
// tslint:disable:no-trailing-whitespace
FisoLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
];
// tslint:disable:no-trailing-whitespace
FisoLexer.modeNames = [
    "DEFAULT_MODE",
];
FisoLexer.ruleNames = [
    "LP", "RP", "LCB", "RCB", "MUL", "DIV", "ADD", "SUB", "GREATHER", "LESSER",
    "GREATEQUAL", "LESSEQUAL", "AND", "OR", "EQUAL", "DIFFERENT", "VAR", "PRINT",
    "IF", "ELSE", "WHILE", "ASSIGN", "NUMBER", "TRUE", "FALSE", "ID", "BLANKS",
];
FisoLexer._LITERAL_NAMES = [
    undefined, "'('", "')'", "'{'", "'}'", "'*'", "'/'", "'+'", "'-'", "'>'",
    "'<'", "'>='", "'<='", "'&&'", "'||'", "'=='", "'!='", "'var'", "'print'",
    "'if'", "'else'", "'while'", "'='", undefined, "'true'", "'false'",
];
FisoLexer._SYMBOLIC_NAMES = [
    undefined, "LP", "RP", "LCB", "RCB", "MUL", "DIV", "ADD", "SUB", "GREATHER",
    "LESSER", "GREATEQUAL", "LESSEQUAL", "AND", "OR", "EQUAL", "DIFFERENT",
    "VAR", "PRINT", "IF", "ELSE", "WHILE", "ASSIGN", "NUMBER", "TRUE", "FALSE",
    "ID", "BLANKS",
];
FisoLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(FisoLexer._LITERAL_NAMES, FisoLexer._SYMBOLIC_NAMES, []);
FisoLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\x98\b\x01" +
    "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
    "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
    "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
    "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
    "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
    "\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
    "\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
    "\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03" +
    "\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03" +
    "\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
    "\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
    "\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x06" +
    "\x18{\n\x18\r\x18\x0E\x18|\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
    "\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x06\x1B\x8B\n\x1B" +
    "\r\x1B\x0E\x1B\x8C\x03\x1B\x07\x1B\x90\n\x1B\f\x1B\x0E\x1B\x93\v\x1B\x03" +
    "\x1C\x03\x1C\x03\x1C\x03\x1C\x02\x02\x02\x1D\x03\x02\x03\x05\x02\x04\x07" +
    "\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15" +
    "\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02" +
    "\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191" +
    "\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D\x03\x02\x06\x03\x022;\x04\x02C\\c" +
    "|\x05\x022;C\\c|\x05\x02\v\f\x0F\x0F\"\"\x02\x9A\x02\x03\x03\x02\x02\x02" +
    "\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
    "\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
    "\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
    "\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
    "\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
    "#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
    "\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
    "\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
    "7\x03\x02\x02\x02\x039\x03\x02\x02\x02\x05;\x03\x02\x02\x02\x07=\x03\x02" +
    "\x02\x02\t?\x03\x02\x02\x02\vA\x03\x02\x02\x02\rC\x03\x02\x02\x02\x0F" +
    "E\x03\x02\x02\x02\x11G\x03\x02\x02\x02\x13I\x03\x02\x02\x02\x15K\x03\x02" +
    "\x02\x02\x17M\x03\x02\x02\x02\x19P\x03\x02\x02\x02\x1BS\x03\x02\x02\x02" +
    "\x1DV\x03\x02\x02\x02\x1FY\x03\x02\x02\x02!\\\x03\x02\x02\x02#_\x03\x02" +
    "\x02\x02%c\x03\x02\x02\x02\'i\x03\x02\x02\x02)l\x03\x02\x02\x02+q\x03" +
    "\x02\x02\x02-w\x03\x02\x02\x02/z\x03\x02\x02\x021~\x03\x02\x02\x023\x83" +
    "\x03\x02\x02\x025\x8A\x03\x02\x02\x027\x94\x03\x02\x02\x029:\x07*\x02" +
    "\x02:\x04\x03\x02\x02\x02;<\x07+\x02\x02<\x06\x03\x02\x02\x02=>\x07}\x02" +
    "\x02>\b\x03\x02\x02\x02?@\x07\x7F\x02\x02@\n\x03\x02\x02\x02AB\x07,\x02" +
    "\x02B\f\x03\x02\x02\x02CD\x071\x02\x02D\x0E\x03\x02\x02\x02EF\x07-\x02" +
    "\x02F\x10\x03\x02\x02\x02GH\x07/\x02\x02H\x12\x03\x02\x02\x02IJ\x07@\x02" +
    "\x02J\x14\x03\x02\x02\x02KL\x07>\x02\x02L\x16\x03\x02\x02\x02MN\x07@\x02" +
    "\x02NO\x07?\x02\x02O\x18\x03\x02\x02\x02PQ\x07>\x02\x02QR\x07?\x02\x02" +
    "R\x1A\x03\x02\x02\x02ST\x07(\x02\x02TU\x07(\x02\x02U\x1C\x03\x02\x02\x02" +
    "VW\x07~\x02\x02WX\x07~\x02\x02X\x1E\x03\x02\x02\x02YZ\x07?\x02\x02Z[\x07" +
    "?\x02\x02[ \x03\x02\x02\x02\\]\x07#\x02\x02]^\x07?\x02\x02^\"\x03\x02" +
    "\x02\x02_`\x07x\x02\x02`a\x07c\x02\x02ab\x07t\x02\x02b$\x03\x02\x02\x02" +
    "cd\x07r\x02\x02de\x07t\x02\x02ef\x07k\x02\x02fg\x07p\x02\x02gh\x07v\x02" +
    "\x02h&\x03\x02\x02\x02ij\x07k\x02\x02jk\x07h\x02\x02k(\x03\x02\x02\x02" +
    "lm\x07g\x02\x02mn\x07n\x02\x02no\x07u\x02\x02op\x07g\x02\x02p*\x03\x02" +
    "\x02\x02qr\x07y\x02\x02rs\x07j\x02\x02st\x07k\x02\x02tu\x07n\x02\x02u" +
    "v\x07g\x02\x02v,\x03\x02\x02\x02wx\x07?\x02\x02x.\x03\x02\x02\x02y{\t" +
    "\x02\x02\x02zy\x03\x02\x02\x02{|\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03" +
    "\x02\x02\x02}0\x03\x02\x02\x02~\x7F\x07v\x02\x02\x7F\x80\x07t\x02\x02" +
    "\x80\x81\x07w\x02\x02\x81\x82\x07g\x02\x02\x822\x03\x02\x02\x02\x83\x84" +
    "\x07h\x02\x02\x84\x85\x07c\x02\x02\x85\x86\x07n\x02\x02\x86\x87\x07u\x02" +
    "\x02\x87\x88\x07g\x02\x02\x884\x03\x02\x02\x02\x89\x8B\t\x03\x02\x02\x8A" +
    "\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C" +
    "\x8D\x03\x02\x02\x02\x8D\x91\x03\x02\x02\x02\x8E\x90\t\x04\x02\x02\x8F" +
    "\x8E\x03\x02\x02\x02\x90\x93\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91" +
    "\x92\x03\x02\x02\x02\x926\x03\x02\x02\x02\x93\x91\x03\x02\x02\x02\x94" +
    "\x95\t\x05\x02\x02\x95\x96\x03\x02\x02\x02\x96\x97\b\x1C\x02\x02\x978" +
    "\x03\x02\x02\x02\x06\x02|\x8C\x91\x03\b\x02\x02";
